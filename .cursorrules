# Counter-Strike 2 Case Unboxer - Project Intelligence

## Key Implementation Patterns

### Frontend Patterns

-   Vue components use PascalCase for filenames (e.g., `CrateGrid.vue`, `SliderItem.vue`)
-   Scrip tag should be on top of the file, template in the middle, and style in the bottom
-   TypeScript interfaces/types use PascalCase (e.g., `Crate`, `Skin`)
-   Constants use UPPER_SNAKE_CASE (e.g., `REAL_ODDS`, `SLIDER_SIZE`)
-   Components are organized by functionality rather than type
-   Reusable logic is extracted into composables (in `composables/` directory)
-   UI components maintain a clean separation from data fetching logic

### Backend Patterns

-   C# follows standard naming conventions (PascalCase for types and methods)
-   Controllers use the suffix `Controller` and inherit from `ControllerBase`
-   API routes use kebab-case (e.g., `/api/crate-opening`)
-   Entity models have navigation properties for related entities
-   Services are injected via dependency injection in constructors
-   Configuration stored in appsettings.json with environment-specific overrides

### Project Structure

-   Frontend and backend are clearly separated in dedicated directories
-   Docker is used for containerization and deployment
-   Nginx handles routing and serves as a reverse proxy
-   Database schema managed through Entity Framework migrations

## Workflow Notes

-   Docker Compose is used for local development environment
-   Build script (`build.sh`) automates environment setup
-   Frontend development server provides hot reloading
-   Backend uses Entity Framework migrations for database updates
